<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="4" passed="3" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2024-06-12T17:54:32 IST" name="Default suite" finished-at="2024-06-12T18:01:25 IST" duration-ms="413024">
    <groups>
    </groups>
    <test started-at="2024-06-12T17:54:32 IST" name="Default test" finished-at="2024-06-12T18:01:25 IST" duration-ms="413024">
      <class name="smoke_Suite.ALC_4871_new">
        <test-method is-config="true" signature="generateAndroidBenefitname()[pri:0, instance:smoke_Suite.ALC_4871_new@2b72cb8a]" started-at="2024-06-12T17:54:32 IST" name="generateAndroidBenefitname" finished-at="2024-06-12T17:54:32 IST" duration-ms="20" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateAndroidBenefitname -->
        <test-method is-config="true" signature="generateBenefitName()[pri:0, instance:smoke_Suite.ALC_4871_new@2b72cb8a]" started-at="2024-06-12T17:54:32 IST" name="generateBenefitName" finished-at="2024-06-12T17:54:32 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateBenefitName -->
        <test-method is-config="true" signature="generateBenefitOrderName()[pri:0, instance:smoke_Suite.ALC_4871_new@2b72cb8a]" started-at="2024-06-12T17:54:32 IST" name="generateBenefitOrderName" finished-at="2024-06-12T17:54:32 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateBenefitOrderName -->
        <test-method is-config="true" signature="generateBranchMemberName()[pri:0, instance:smoke_Suite.ALC_4871_new@2b72cb8a]" started-at="2024-06-12T17:54:32 IST" name="generateBranchMemberName" finished-at="2024-06-12T17:54:32 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateBranchMemberName -->
        <test-method is-config="true" signature="generateBranchName()[pri:0, instance:smoke_Suite.ALC_4871_new@2b72cb8a]" started-at="2024-06-12T17:54:32 IST" name="generateBranchName" finished-at="2024-06-12T17:54:32 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateBranchName -->
        <test-method is-config="true" signature="generateBonusName()[pri:0, instance:smoke_Suite.ALC_4871_new@2b72cb8a]" started-at="2024-06-12T17:54:32 IST" name="generateBonusName" finished-at="2024-06-12T17:54:32 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateBonusName -->
        <test-method is-config="true" signature="generateRandomBranchMemberNumber()[pri:0, instance:smoke_Suite.ALC_4871_new@2b72cb8a]" started-at="2024-06-12T17:54:32 IST" name="generateRandomBranchMemberNumber" finished-at="2024-06-12T17:54:32 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateRandomBranchMemberNumber -->
        <test-method is-config="true" signature="generateRandomLastName()[pri:0, instance:smoke_Suite.ALC_4871_new@2b72cb8a]" started-at="2024-06-12T17:54:32 IST" name="generateRandomLastName" finished-at="2024-06-12T17:54:32 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateRandomLastName -->
        <test-method is-config="true" signature="generateRandomNumber()[pri:0, instance:smoke_Suite.ALC_4871_new@2b72cb8a]" started-at="2024-06-12T17:54:32 IST" name="generateRandomNumber" finished-at="2024-06-12T17:54:32 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateRandomNumber -->
        <test-method is-config="true" signature="setup()[pri:0, instance:smoke_Suite.ALC_4871_new@2b72cb8a]" started-at="2024-06-12T17:54:32 IST" name="setup" finished-at="2024-06-12T17:55:02 IST" duration-ms="30757" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="preconditions()[pri:0, instance:smoke_Suite.ALC_4871_new@2b72cb8a]" started-at="2024-06-12T17:55:02 IST" name="preconditions" description="Ensure that GCash is turned on in country settings for Philippines and a valid Philippines account linked to GCash having tokens in wallet exists." finished-at="2024-06-12T17:55:43 IST" duration-ms="40918" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preconditions -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:smoke_Suite.ALC_4871_new@2b72cb8a]" started-at="2024-06-12T17:55:43 IST" name="afterMethod" finished-at="2024-06-12T17:55:43 IST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=preconditions status=SUCCESS method=ALC_4871_new.preconditions()[pri:0, instance:smoke_Suite.ALC_4871_new@2b72cb8a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="gCashTransaction()[pri:1, instance:smoke_Suite.ALC_4871_new@2b72cb8a]" started-at="2024-06-12T17:55:43 IST" name="gCashTransaction" description="Login with existing account and perform GCASH Transaction." finished-at="2024-06-12T17:58:45 IST" duration-ms="181180" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- gCashTransaction -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:smoke_Suite.ALC_4871_new@2b72cb8a]" started-at="2024-06-12T17:58:45 IST" name="afterMethod" finished-at="2024-06-12T17:58:45 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=gCashTransaction status=SUCCESS method=ALC_4871_new.gCashTransaction()[pri:1, instance:smoke_Suite.ALC_4871_new@2b72cb8a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="checktokens()[pri:2, instance:smoke_Suite.ALC_4871_new@2b72cb8a]" started-at="2024-06-12T17:58:45 IST" name="checktokens" description="Ensure that tokens have deducted and after deduction same tokens are present in member wallet on both Alchemy and app." finished-at="2024-06-12T18:00:06 IST" duration-ms="80953" status="FAIL">
          <exception class="org.openqa.selenium.json.JsonException">
            <message>
              <![CDATA[java.lang.reflect.InvocationTargetException
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.6'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [f34d8cf27906b6aef938ef7b10f55a61, actions {actions=[org.openqa.selenium.interactions.Sequence@72b689f6]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 125.0.6422.142, chrome: {chromedriverVersion: 125.0.6422.141 (4b1e8393712..., userDataDir: C:\Users\Fleek\AppData\Loca...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:65468}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:65468/devtoo..., se:cdpVersion: 125.0.6422.142, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: f34d8cf27906b6aef938ef7b10f55a61]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.json.JsonException: java.lang.reflect.InvocationTargetException
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.6'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [f34d8cf27906b6aef938ef7b10f55a61, actions {actions=[org.openqa.selenium.interactions.Sequence@72b689f6]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 125.0.6422.142, chrome: {chromedriverVersion: 125.0.6422.141 (4b1e8393712..., userDataDir: C:\Users\Fleek\AppData\Loca...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:65468}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:65468/devtoo..., se:cdpVersion: 125.0.6422.142, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: f34d8cf27906b6aef938ef7b10f55a61
at org.openqa.selenium.json.JsonOutput.convertUsingMethod(JsonOutput.java:520)
at org.openqa.selenium.json.JsonOutput.lambda$new$16(JsonOutput.java:182)
at org.openqa.selenium.json.JsonOutput.write0(JsonOutput.java:409)
at org.openqa.selenium.json.JsonOutput.lambda$new$22(JsonOutput.java:204)
at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)
at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1845)
at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
at org.openqa.selenium.json.JsonOutput.lambda$new$23(JsonOutput.java:204)
at org.openqa.selenium.json.JsonOutput.write0(JsonOutput.java:409)
at org.openqa.selenium.json.JsonOutput.lambda$new$24(JsonOutput.java:222)
at com.google.common.collect.SingletonImmutableBiMap.forEach(SingletonImmutableBiMap.java:68)
at org.openqa.selenium.json.JsonOutput.lambda$new$25(JsonOutput.java:217)
at org.openqa.selenium.json.JsonOutput.write0(JsonOutput.java:409)
at org.openqa.selenium.json.JsonOutput.write(JsonOutput.java:400)
at org.openqa.selenium.json.Json.toJson(Json.java:133)
at org.openqa.selenium.json.Json.toJson(Json.java:119)
at org.openqa.selenium.remote.codec.AbstractHttpCommandCodec.encode(AbstractHttpCommandCodec.java:273)
at org.openqa.selenium.remote.codec.AbstractHttpCommandCodec.encode(AbstractHttpCommandCodec.java:127)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:179)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:196)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:171)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:602)
at org.openqa.selenium.remote.RemoteWebDriver.perform(RemoteWebDriver.java:688)
at org.openqa.selenium.interactions.Actions$BuiltAction.perform(Actions.java:605)
at Utilities.BaseClass.takescreenshotof(BaseClass.java:273)
at alchemy_Pages.Reports.transactionStatusInAlchemyReportsforgcash(Reports.java:82)
at smoke_Suite.ALC_4871_new.checktokens(ALC_4871_new.java:50)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Suppressed: org.openqa.selenium.json.JsonException: Attempting to close incomplete json stream
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.6'
Driver info: driver.version: RemoteWebDriver
at org.openqa.selenium.json.JsonOutput.close(JsonOutput.java:431)
at org.openqa.selenium.json.Json.toJson(Json.java:131)
... 40 more
Caused by: java.lang.reflect.InvocationTargetException
at jdk.internal.reflect.GeneratedMethodAccessor23.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.openqa.selenium.json.JsonOutput.convertUsingMethod(JsonOutput.java:516)
... 61 more
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//div[text()='Token Exchange History']/following::tr/td/div/div[text()=' pending ']"}
  (Session info: chrome=125.0.6422.142)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.6'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [f34d8cf27906b6aef938ef7b10f55a61, findElement {using=xpath, value=//div[text()='Token Exchange History']/following::tr/td/div/div[text()=' pending ']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 125.0.6422.142, chrome: {chromedriverVersion: 125.0.6422.141 (4b1e8393712..., userDataDir: C:\Users\Fleek\AppData\Loca...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:65468}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:65468/devtoo..., se:cdpVersion: 125.0.6422.142, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: f34d8cf27906b6aef938ef7b10f55a61
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:200)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:133)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:52)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:191)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:196)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:171)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:602)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:359)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:353)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy22.getWrappedElement(Unknown Source)
at org.openqa.selenium.interactions.PointerInput$Origin.asArg(PointerInput.java:259)
at org.openqa.selenium.interactions.PointerInput$Move.encode(PointerInput.java:208)
at org.openqa.selenium.interactions.Sequence.encode(Sequence.java:72)
at org.openqa.selenium.interactions.Sequence.toJson(Sequence.java:81)
... 65 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.json.JsonException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checktokens -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:smoke_Suite.ALC_4871_new@2b72cb8a]" started-at="2024-06-12T18:00:06 IST" name="afterMethod" finished-at="2024-06-12T18:00:06 IST" duration-ms="478" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=checktokens status=FAILURE method=ALC_4871_new.checktokens()[pri:2, instance:smoke_Suite.ALC_4871_new@2b72cb8a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="checkforunverifiednum()[pri:3, instance:smoke_Suite.ALC_4871_new@2b72cb8a]" started-at="2024-06-12T18:00:06 IST" name="checkforunverifiednum" description="Unverified member should not be able to perform gojek transaction and get error message." finished-at="2024-06-12T18:01:23 IST" duration-ms="77064" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkforunverifiednum -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:smoke_Suite.ALC_4871_new@2b72cb8a]" started-at="2024-06-12T18:01:23 IST" name="afterMethod" finished-at="2024-06-12T18:01:23 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=checkforunverifiednum status=SUCCESS method=ALC_4871_new.checkforunverifiednum()[pri:3, instance:smoke_Suite.ALC_4871_new@2b72cb8a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="teardownalchemy()[pri:0, instance:smoke_Suite.ALC_4871_new@2b72cb8a]" started-at="2024-06-12T18:01:23 IST" name="teardownalchemy" finished-at="2024-06-12T18:01:24 IST" duration-ms="927" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardownalchemy -->
        <test-method is-config="true" signature="teardownapp()[pri:0, instance:smoke_Suite.ALC_4871_new@2b72cb8a]" started-at="2024-06-12T18:01:24 IST" name="teardownapp" finished-at="2024-06-12T18:01:25 IST" duration-ms="542" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardownapp -->
      </class> <!-- smoke_Suite.ALC_4871_new -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
